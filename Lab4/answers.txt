How many cores will simple.cu use, max, as written? How many SMs?
    - 16 threads in 1 SM. (Grid contains one Block of size <16, 1>)


Is the calculated square root identical to what the CPU calculates? Should we assume that this is always the case?
    - As far as we can see yes, we can however not assume that this is true since GPU:s have the capability to work with half floats, giving less precision than the full counterparts.

How do you calculate the index in the array, using 2-dimensional blocks?
    int index_x = blockIdx.x * blockDim.x + threadIdx.x;
    int stride_x = blockDim.x * gridDim.x;
    int index_y = blockIdx.y * blockDim.y + threadIdx.y;
    int stride_y = blockDim.y * gridDim.y;

What happens if you use too many threads per block?
    - Cuda error: invalid configuration argument

At what data size is the GPU faster than the CPU?
    - At around N = 100 we start seeing the GPU pull ahead of the CPU

What block size seems like a good choice? Compared to what?
    - We found that a block size of 16x16 is the fastest out of the ones we tried (8x8, 16x16, 32x32)

Write down your data size, block size and timing data for the best GPU performance you can get.
    - N = 8192
    - 512x512 blocks with 16x16 threads per block
    =
    GPU Kernel executed in 22.839487 milliseconds
    CPU function executed in 1880.901978 milliseconds          